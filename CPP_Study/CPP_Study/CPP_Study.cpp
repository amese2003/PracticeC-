#include <iostream>

using namespace std;

// 오늘의 주제 : 문자와 문자열
// bool은 그냥 정수지만, 참/거짓을 나타내기 위해 사용
// 사실 char도 마찬가지. 그냥 정수지만 '문자' 의미를 나타내기 위해 사용

// char : 알파벳 / 숫자 문자
// wchar_t : 유니코드 문자를 나타낸다

// unicode
// 복습
// UTF8
// - 알파벳, 숫자 1바이트 (ASCII 동일)
// - 유렵 지역의 문자는 2바이트
// - 한글, 한자 등 3바이트

// UTF16
// - 알파벳, 숫자, 한글, 한자 등 거의 대부분 문자 2바이트
// - 매~~~우 예외적인 고대 문자만 4바이트 (사실상 무시해도 됨)

// wchar_t test = L'안';

unsigned char flag; // 부호를 없애야 >> 를 해도 부호가 딸려오지 않음!


int main()
{
    bool a = 1;

#pragma region 비트연산
    
    // 언제 필요할까?
    // 비트 단위의 조작이 필요할 때
    // - 대표적으로 BitFlag

    // ~ bitwise not
    // 단일 숫자의 모든 비트를 대상으로, 0은 1, 1은 0으로

    // & bitwise and
    // 두 숫자의 모든 비트 쌍을 대상으로, and

    // | bitwise or
    // 두 숫자의 모든 비트 쌍을 대상으로, or

    // ^ bitwise xor
    // 두 숫자의 모든 비트 쌍을 대상으로, xor

    // << 비트 좌측 이동
    // 비트열을 N만큼 왼쪽으로 이동
    // 넘치는 비트는 버림.
    // *2를 할 때 자주 보임.

    // >> 비트 우측 이동
    // 비트열을 N만큼 오른쪽으로 이동
    // 오른쪽의 넘치는 N개의 비트는 버림.
    // 왼쪽 생성되는 N개의 비트는 어떻게 할래?
    // - 부호 비트가 존재할 경우 부호 비트를 따라감 (부호있는 정수라면 이 부분을 유의)
    // - 아니면 0

    int a = 1;
    int b = 123;

    // b가 대칭키!
    a ^= b;
    a ^= b;

    // 실습
    // 0b0000 [무적][변이][스턴][공중부양]

    // 무적?
    flag = (1 << 3);
    
    // 변이 상태 추가 (무적 + 변이)
    flag |= (1 << 2);

    // 무적인지 확인하고 싶다
    // bitmask
    bool invincible = ((flag & (1 << 3)) == 1);
    
    
    // 무적이거나 스턴상태
    bool stunOrInvincible = ((flag & 0b1010) != 0);



    


#pragma endregion


    return 0;
}